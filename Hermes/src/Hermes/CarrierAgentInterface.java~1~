package Hermes;

import Zeus.*;

import java.awt.*;
import java.awt.event.*;

import java.io.*;
import java.util.*;

import java.net.*;

import javax.swing.*;


/**
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: </p>
 * @author Ola Laleye, Mike McNamara, Anthony Pitluga
 * @version 1.0
 */
public class CarrierAgentInterface extends JFrame implements MessageTags {
  private String carrierCode;
  private String carrierIP;
  private int carrierPort;
  public int myMasterPort;
  private CarrierMessageListener messageListener;
  private Zeus theZeus;
  private JLabel CarrierLabel = new JLabel();
  private JLabel jLabelCarName = new JLabel();
  private JTextField jtfCarName = new JTextField();
  private JLabel jLabelCarCode = new JLabel();
  private JButton jbRegister = new JButton();
  private JButton jbOptimize = new JButton();
  private JTextField jtfCarCode = new JTextField();
  private JButton jbDisplayRoute = new JButton();
  private JLabel jlConstraints = new JLabel();
  private JLabel jlTotalDemand = new JLabel();
  private JTextField jtfTotalDemand = new JTextField();
  private JLabel jlTotalDistance = new JLabel();
  private JTextField jtfTotalDistance = new JTextField();
  private JTextField jtfTotalTravTime = new JTextField();
  private JTextField jtfTotalTard = new JTextField();
  private JTextField jtfTotalExcTime = new JTextField();
  private JTextField jtfTotalOverload = new JTextField();
  private JLabel jlTotalTravTime = new JLabel();
  private JLabel jlTotalTard = new JLabel();
  private JLabel jlExcTime = new JLabel();
  private JLabel jlTotalOverload = new JLabel();
  private JLabel jlTotalWaitTime = new JLabel();
  private JTextField jtfTotalWaitTime = new JTextField();
  private GridBagLayout gridBagLayout1 = new GridBagLayout();

  /**
  * constructor creates a socket that listens to incoming messages at a specific
  * port number
  * @param code agent code
  * @param IP ip address of this carrier
  */
  public CarrierAgentInterface(String depotFile, String IP) {
    carrierIP = IP;
    theZeus = new Zeus();
    readFile(depotFile);

    try {
      jbInit();
    } catch (Exception ex) {
    }
  }

  /**
   * Constructor - not used
   */
  public CarrierAgentInterface() {
    try {
      jbInit();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
  * this method registers the carrier on the masterserver
  * @return int  port number for the carrier
  */
  public int registerCarrierWithMasterserver() {
    int portNo = 0;

    //register the shipper in the master database
    try {
      Message addressMsg = new Message();
      Message registerMsg = new Message();
      Socket socket = null;
      BufferedReader in = null;
      ThreadedClient tc;

      //create a new register message to tell master server that this carrier
      //is now active
      registerMsg.setMessageType(MessageTags.RegisterTag);
      registerMsg.addArgument(MessageTags.AgentTypeTag, CarrierMessage);

      registerMsg.addArgument(CodeTag, jtfCarCode.getText());
      registerMsg.addArgument(NameTag, jtfCarName.getText());

      //            registerMsg.addArgument(NameTag,
      //            Carrier.getCarrierName());
      //create a message containing the address of this carrier for use by the
      //master server
      addressMsg.setMessageType(InetAddressTag);

      addressMsg.addArgument(MessageTags.IPAddressTag, carrierIP);
      addressMsg.addArgument(MessageTags.PortNumberTag,
        Integer.toString(carrierPort));
      registerMsg.addArgument(addressMsg);

      //the message is to be sent to the master server
      // read message from open socket
      // parse message and return port no.
      try {
        socket = new Socket(HermesGlobals.masterServerIP,
            HermesGlobals.masterServerPortNo);
        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        new ThreadedClient(registerMsg, socket);

        Message portMsg = new Message(in.readLine());
        portNo = Integer.parseInt(portMsg.getValue(PortNumberTag));
      } catch (Exception ex) {
        System.err.print("Carrier unable to register: " + ex);
        ex.printStackTrace();
        System.exit(800135);
      } finally {
        try {
          in.close();
          socket.close();
        } catch (IOException ex) {
          System.err.print("Error closing socket for Carrier registration: " +
            ex);
        }
      }

      jbRegister.setEnabled(false);

      return portNo;
    } catch (Exception e1) {
      e1.printStackTrace();
    }

    //display output about registering
    System.out.println("Registered with Master Server, got port " + portNo);

    return portNo;
  }

  public void unregisterWithMasterServer(){
    int portNo = 0;

    //register the shipper in the master database
    try {
      Message addressMsg = new Message();
      Message unregisterMsg = new Message();
      Socket socket = null;
      ThreadedClient tc;

      //create a new register message to tell master server that this carrier
      //is now active
      unregisterMsg.setMessageType(MessageTags.UnregisterTag);
      unregisterMsg.addArgument(MessageTags.AgentTypeTag, CarrierMessage);

      //create a message containing the address of this carrier for use by the
      //master server
      addressMsg.setMessageType(InetAddressTag);

      addressMsg.addArgument(MessageTags.IPAddressTag, carrierIP);
      addressMsg.addArgument(MessageTags.PortNumberTag,
        Integer.toString(carrierPort));
      unregisterMsg.addArgument(addressMsg);

      //the message is to be sent to the master server
      // read message from open socket
      // parse message and return port no.
      try {

        new ThreadedClient(unregisterMsg, HermesGlobals.masterServerIP,
                           HermesGlobals.masterServerPortNo);

      } catch (Exception ex) {
        System.err.print("Carrier unable to unregister: " + ex);

//      } finally {
//        try {
//          socket.close();
//        } catch (IOException ex) {
//          System.err.print("Error closing socket for Carrier registration: " +
//            ex);
//        }
      }

      jbRegister.setEnabled(true);

    } catch (Exception e1) {
      e1.printStackTrace();
    }

  }

  private void jbInit() throws Exception {
    jLabelCarName.setText("Carrier Name");
    this.getContentPane().setLayout(gridBagLayout1);
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//terminates carrier when frame is closed

    CarrierLabel.setText("Carrier Name");
    this.setFont(new java.awt.Font("Dialog", 1, 12));
    this.setTitle("Carrier Agent");
    jtfCarName.setText("UPS SRU");
    jtfCarName.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent e) {
          jtfCarName_actionPerformed(e);
        }
      });
    jLabelCarCode.setText("Carrier Code");
    jbRegister.setActionCommand("jbregisterCar");
    jbRegister.setContentAreaFilled(false);
    jbRegister.setText("Register Agent");
    jbRegister.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent e) {
          jbRegister_actionPerformed(e);
        }
      });
    jbOptimize.setEnabled(false);
    jbOptimize.setActionCommand("jbOptimize");
    jbOptimize.setText("Optimize");
    jbOptimize.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent e) {
          jbOptimize_actionPerformed(e);
        }
      });
    jtfCarCode.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(ActionEvent e) {
          jtfCarCode_actionPerformed(e);
        }
      });
    jtfCarCode.setText("2020");
    jbDisplayRoute.setEnabled(false);
    jbDisplayRoute.setActionCommand("jbDisplayRoute");
    jbDisplayRoute.setText("Display Route");
    jlConstraints.setFont(new java.awt.Font("Dialog", 1, 12));
    jlConstraints.setText("Constraints:");
    jlTotalDemand.setText("Total Demand");
    jlTotalDistance.setText("Total Distance");
    jlTotalTravTime.setText("Total Travel Time");
    jlTotalTard.setText("Total Tardiness");
    jlExcTime.setText("Total Excess Time");
    jlTotalOverload.setText("Total Overload");
    jlTotalWaitTime.setText("Total Wait Time");
    jtfTotalDemand.setEditable(false);
    jtfTotalDistance.setEditable(false);
    jtfTotalTravTime.setEditable(false);
    jtfTotalTard.setEditable(false);
    jtfTotalExcTime.setEditable(false);
    jtfTotalOverload.setEditable(false);
    jtfTotalWaitTime.setEditable(false);
    this.getContentPane().add(jLabelCarCode,
      new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.NONE, new Insets(17, 27, 0, 8), 0, 4));
    this.getContentPane().add(jLabelCarName,
      new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.NONE, new Insets(26, 27, 0, 0), 4, 5));
    this.getContentPane().add(jtfCarName,
      new GridBagConstraints(1, 0, 2, 1, 1.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.HORIZONTAL, new Insets(26, 0, 0, 0), 75, 0));
    this.getContentPane().add(jtfCarCode,
      new GridBagConstraints(1, 1, 2, 1, 1.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.HORIZONTAL, new Insets(17, 0, 0, 0), 101, 0));
    this.getContentPane().add(jbRegister,
      new GridBagConstraints(0, 2, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER,
        GridBagConstraints.NONE, new Insets(31, 10, 0, 0), 0, 3));
    this.getContentPane().add(jbOptimize,
      new GridBagConstraints(2, 2, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER,
        GridBagConstraints.NONE, new Insets(31, 7, 0, 10), 16, 2));
    this.getContentPane().add(jbDisplayRoute,
      new GridBagConstraints(3, 2, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER,
        GridBagConstraints.NONE, new Insets(31, 0, 0, 26), 5, 2));
    this.getContentPane().add(jlConstraints,
      new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.NONE, new Insets(13, 10, 0, 16), 9, 10));
    this.getContentPane().add(jlTotalDemand,
      new GridBagConstraints(0, 4, 2, 1, 0.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.NONE, new Insets(0, 10, 0, 8), 27, 1));
    this.getContentPane().add(jlTotalDistance,
      new GridBagConstraints(0, 5, 2, 1, 0.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.NONE, new Insets(8, 10, 0, 8), 26, 1));
    this.getContentPane().add(jtfTotalDistance,
      new GridBagConstraints(2, 5, 2, 1, 1.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.HORIZONTAL, new Insets(8, 0, 0, 61), 136, -2));
    this.getContentPane().add(jtfTotalTravTime,
      new GridBagConstraints(2, 6, 2, 1, 1.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.HORIZONTAL, new Insets(11, 0, 0, 61), 136, -2));
    this.getContentPane().add(jtfTotalTard,
      new GridBagConstraints(2, 7, 2, 1, 1.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.HORIZONTAL, new Insets(6, 0, 0, 61), 136, -2));
    this.getContentPane().add(jtfTotalExcTime,
      new GridBagConstraints(2, 8, 2, 1, 1.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.HORIZONTAL, new Insets(9, 0, 0, 61), 136, -2));
    this.getContentPane().add(jlTotalTravTime,
      new GridBagConstraints(0, 6, 2, 1, 0.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.NONE, new Insets(11, 10, 0, 7), 12, 1));
    this.getContentPane().add(jlTotalTard,
      new GridBagConstraints(0, 7, 2, 1, 0.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.NONE, new Insets(6, 10, 0, 6), 21, 1));
    this.getContentPane().add(jlExcTime,
      new GridBagConstraints(0, 8, 2, 1, 0.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.NONE, new Insets(9, 10, 0, 6), 6, 1));
    this.getContentPane().add(jlTotalOverload,
      new GridBagConstraints(0, 9, 2, 1, 0.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.NONE, new Insets(8, 10, 0, 9), 25, 1));
    this.getContentPane().add(jtfTotalOverload,
      new GridBagConstraints(2, 9, 2, 1, 1.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.HORIZONTAL, new Insets(8, 0, 0, 61), 136, -2));
    this.getContentPane().add(jlTotalWaitTime,
      new GridBagConstraints(0, 10, 2, 1, 0.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.NONE, new Insets(10, 10, 19, 7), 22, 1));
    this.getContentPane().add(jtfTotalWaitTime,
      new GridBagConstraints(2, 10, 2, 1, 1.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.HORIZONTAL, new Insets(10, 0, 19, 61), 136, -2));
    this.getContentPane().add(jtfTotalDemand,
      new GridBagConstraints(2, 4, 2, 1, 1.0, 0.0, GridBagConstraints.WEST,
        GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 61), 136, -2));
    this.setSize(400, 400);
    this.setVisible(true);
  }

  void jmiExit_actionPerformed(ActionEvent e) {
        System.out.println("Exiting Carrier Agent ");
        unregisterWithMasterServer(); //unregister when exited
        System.exit(0);
  }

  void jbOptimize_actionPerformed(ActionEvent e) {
  }

  void jtfCarName_actionPerformed(ActionEvent e) {

  }

  void jtfCarCode_actionPerformed(ActionEvent e) {
  }

  /**
   * after carriers receive
   */
  public void EnableCarrierJButtons(){
       jbDisplayRoute.setEnabled(true);
       jbOptimize.setEnabled(true);
    }


  void jbRegister_actionPerformed(ActionEvent e) {
    carrierPort = registerCarrierWithMasterserver();

    messageListener = new CarrierMessageListener(carrierPort,theZeus, this);

     /* trying to recover from BindException not working

      //if a bind exception is thrown try to reregister until you find a port
      //that isnt being used
      boolean isGoodPort = false;

      while(!isGoodPort){

        try{
          //unregister yourself with MS
          unregisterWithMasterServer();

          //reregister with MS to get another port
          carrierPort = registerCarrierWithMasterserver();
          messageListener = new CarrierMessageListener(carrierPort, theZeus);

          //exception not thrown, found good port
          isGoodPort = true;
        }catch(java.io.IOException ioe2){
          //not yet found good port
          System.out.println("not foudna  good port yet");
          isGoodPort = false;
        }
      }
      */

    jbRegister.setEnabled(false);
    jtfCarName.setEditable(false);
    jtfCarCode.setEditable(false);
  }

  /**
   * Return the ip address
   * @return ip address
   * @todo update this...
   */
  public String getIP(){
    return carrierIP;
  }

  /**
   * Return the port number
   * @return port number
   * @todo update this...
   */
  public int getPort(){
    return carrierPort;
  }

  /**
 * <p>Read in the data from the datafile and load it into the Zeus System
 * using the tokenizer.</p>
 * @param fileName String type of the filename consisting of the data
 * @return boolean Return true if all successful, false for failure
 * @todo  fix this method to read depot info
 */
private boolean readFile(String fileName) {
  ZeusAdaptor za = new ZeusAdaptor(theZeus);
  Message msg = new Message();
  FileInputStream fis;
  InputStreamReader isr;
  BufferedReader br;
  int depCount = 0;
  int depIndex = 0;
  float xIndex = 0;
  float yIndex = 0;
  int dist = 0;
  int capacity = 0;
  int cust = 0;


  try {
    //open the requested file
    fis = new FileInputStream(fileName);
    isr = new InputStreamReader(fis);
    br = new BufferedReader(isr);
  } catch (Exception e) {
    System.err.println("File is not present");
    return false;
  }

  String line;
  StringTokenizer st = null;

  try {
    br.readLine(); // skip text labels
    line = br.readLine();  // depot constraints
    st = new StringTokenizer(line);
    // skip text labels
    br.readLine();
  }
  catch (IOException ex) {
    System.err.println("Error reading depot file: " + fileName + ": " + ex);
  }

  try {
    depCount = Integer.parseInt(st.nextToken().trim());
    dist = Integer.parseInt(st.nextToken().trim());
    capacity = Integer.parseInt(st.nextToken().trim());
    cust = Integer.parseInt(st.nextToken().trim());
  }
  catch (NumberFormatException ex) {
    System.err.println("Error processing depot constraint info: " + ex);
  }

  //process depots
  for(int i = 0; i < depCount; i++){
    try {
      line = br.readLine();
      st = new StringTokenizer(line);
    }
    catch (IOException ex) {
      System.err.println("Error reading depot file: " + fileName + ": " + ex);
    }

    //read the depot information
    try {
      depIndex = Integer.parseInt(st.nextToken().trim());
      xIndex = Float.parseFloat(st.nextToken().trim());
      yIndex = Float.parseFloat(st.nextToken().trim());
    }
    catch (NumberFormatException ex) {
      System.err.println("Error processing depot coordinate info: " + ex);
    }

    // build the message
    msg.addArgument(IndexTag, "" + depIndex);
    msg.addArgument(XCoordTag, "" + xIndex);
    msg.addArgument(YCoordTag, "" + yIndex);
  }

  //save max distance and capacity
  if (dist == 0) { //if no max distance, set to a large number...
    dist = 999999999;
  }

  if (capacity == 0) { //if there is no maximum capacity, set it to a very large number
    capacity = 999999999;
  }

  // build the message
  msg.addArgument(NumberOfDepotsTag, "" + depCount);
  msg.addArgument(MaxCapacityTag, "" + capacity);
  msg.addArgument(MaxDistanceTag, "" + dist);
  msg.addArgument(FileNameTag, fileName);
  msg.addArgument(NumberOfCustomersTag, "" + cust);

  za.setProblemConstraints(msg);

  return true;
}

}
